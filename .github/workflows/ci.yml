name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


permissions:
  contents: write
  packages: write

jobs:

  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.18.0"
      - name: Install dependencies
        run: npm install && npm ci --cache .npm --prefer-offline
      - name: Verify ESLint installation
        run: npm list eslint

  lint:
    runs-on: ubuntu-latest
    needs: install
    if: "!startsWith(github.ref, 'refs/tags/') && !contains(github.event.head_commit.message, 'chore: release')"
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.18.0"
      - name: Install dependencies (again for lint job)
        run: npm install
      - name: Run lint
        run: npm run lint

  unit-test:
    runs-on: ubuntu-latest
    needs: install
    if: "!startsWith(github.ref, 'refs/tags/') && !contains(github.event.head_commit.message, 'chore: release')"
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.18.0"
      - name: Install dependencies
        run: npm install
      - name: Run unit tests
        run: npm run test

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git configuration
        run: git config user.email "${{ github.actor }}@users.noreply.github.com" && git config user.name "${{ github.actor }}"

      - name: Pull the latest changes from the main branch
        run: git pull origin main --rebase

      - name: Install release-it
        run: npm install -g release-it

      - name: Check if commit message is "chore release"
        id: check_message
        run: |
          LAST_COMMIT=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT" == "chore: release"* ]]; then
            echo "is_chore_release=true" >> $GITHUB_ENV
          else
            echo "is_chore_release=false" >> $GITHUB_ENV
          fi

      - name: Run release-it
        if: env.is_chore_release == 'true'
        run: npx --yes release-it --ci
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}

  e2e-test:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Run end-to-end tests
        run: echo "Hello E2E !"

  only-canary:
    runs-on: ubuntu-latest
    needs: install
    env:
      ENV_TARGET: "canary"
    if: ${{ github.event.inputs.ENV_TARGET == 'canary' }}
    steps:
      - name: Say Hello
        run: echo "Hello Only Canary !"

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Run integration tests
        run: echo "Hello Integration !"
          